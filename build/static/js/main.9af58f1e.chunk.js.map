{"version":3,"sources":["components/JoinBlock.js","socket.js","components/Chat.js","reducer.js","App.js","reportWebVitals.js","index.js"],"names":["JoinBlock","onLogin","useState","roomId","setRoomId","userName","setUserName","isLoading","setLoading","onEnter","e","a","key","type","alert","obj","axios","post","className","placeholder","value","onChange","target","onKeyPress","disabled","onClick","socket","io","Chat","users","messages","onAddMessage","React","messageValue","setMessageValue","messagesRef","useRef","onSendMessage","emit","text","useEffect","current","scrollTo","length","map","name","index","ref","message","rows","state","action","joined","payload","App","useReducer","reducer","dispatch","get","data","setUsers","addMessage","on","window","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9af58f1e.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport React, { useState } from 'react'\r\n\r\nfunction JoinBlock({ onLogin }) {\r\n    const [roomId, setRoomId] = useState('')\r\n    const [userName, setUserName] = useState('')\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    const onEnter = async (e) => {\r\n        if (e.key == 'Enter' || e.type == 'click') {\r\n            if (!roomId || !userName) {\r\n                return alert('Неверные данные')\r\n            }\r\n            const obj = {\r\n                roomId,\r\n                userName\r\n            }\r\n            setLoading(true)\r\n            await axios.post('/rooms', obj)\r\n            onLogin(obj)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"join-block\">\r\n            <input type=\"text\" placeholder=\"Room ID\" value={roomId} onChange={e => setRoomId(e.target.value)} onKeyPress={onEnter}/>\r\n            <input type=\"text\" placeholder=\"Ваше имя\" value={userName} onChange={e => setUserName(e.target.value)} onKeyPress={onEnter}/>\r\n            <button disabled={isLoading} className=\"btn btn-success\" onClick={onEnter}>{isLoading ? 'ВХОД...' : 'ВОЙТИ'}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JoinBlock\r\n","import io from 'socket.io-client'\r\n\r\nconst socket = io()\r\n\r\nexport default socket","\r\nimport React from 'react';\r\nimport socket from '../socket';\r\n\r\nfunction Chat({ users, messages, userName, roomId, onAddMessage }) {\r\n    const [messageValue, setMessageValue] = React.useState('');\r\n    const messagesRef = React.useRef(null);\r\n\r\n        const onSendMessage = (e) => {\r\n            if(e.key == 'Enter' || e.type == 'click'){\r\n            socket.emit('ROOM:NEW_MESSAGE', {\r\n                userName,\r\n                roomId,\r\n                text: messageValue,\r\n            })\r\n            onAddMessage({ userName, text: messageValue });\r\n            setMessageValue('');\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        messagesRef.current.scrollTo(0, 99999);\r\n    }, [messages]);\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat-users\">\r\n                Комната: <b>{roomId}</b>\r\n                <hr />\r\n                <b>Онлайн ({users.length}):</b>\r\n                <ul>\r\n                    {users.map((name, index) => (\r\n                        <li key={name + index}>{name}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            <div className=\"chat-messages\">\r\n                <div ref={messagesRef} className=\"messages\">\r\n                    {messages.map((message) => (\r\n                        <div className=\"message\">\r\n                            <p>{message.text}</p>\r\n                            <div>\r\n                                <span>{message.userName}</span>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <form>\r\n                    <textarea \r\n                        onKeyPress={onSendMessage}\r\n                        value={messageValue}\r\n                        onChange={(e) => setMessageValue(e.target.value)}\r\n                        className=\"form-control\"\r\n                        rows=\"3\"></textarea>\r\n                    <button onClick={onSendMessage} type=\"button\" className=\"btn btn-primary\">\r\n                        Отправить\r\n            </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;","export default (state, action) => {\r\n    switch (action.type) {\r\n        case 'JOINED':\r\n            return {\r\n                ...state,\r\n                joined: true,\r\n                userName: action.payload.userName,\r\n                roomId: action.payload.roomId\r\n            }\r\n\r\n        case 'SET_DATA':\r\n            return {\r\n                ...state,\r\n                users: action.payload.users,\r\n                messages: action.payload.messages\r\n            }\r\n\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.payload\r\n            }\r\n\r\n        case 'NEW_MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { useEffect, useReducer } from 'react'\nimport JoinBlock from './components/JoinBlock'\nimport Chat from './components/Chat'\nimport reducer from './reducer'\nimport socket from './socket'\nimport axios from 'axios'\n\n\nfunction App(){\n  const [state, dispatch] = useReducer(reducer, {\n    joined: false,\n    roomId: null,\n    userName: null,\n    users: [],\n    messages: []\n  })\n\n  const onLogin = async (obj) => {\n    dispatch({\n      type: 'JOINED',\n      payload: obj\n    })\n    socket.emit('ROOM:JOIN', obj)\n    const { data } = await axios.get(`/rooms/${obj.roomId}`)\n    dispatch({\n      type: 'SET_DATA',\n      payload: data\n    })\n  }\n\n  const setUsers = (users) => {\n    dispatch({\n      type: 'SET_USERS',\n      payload: users\n    })\n  }\n  \n  const addMessage = (message) => {\n    dispatch({\n      type: 'NEW_MESSAGE',\n      payload: message\n    })\n  }\n\n  useEffect( () => {\n    socket.on('ROOM:SET_USERS', setUsers)\n    socket.on('ROOM:NEW_MESSAGE', addMessage)\n  }, [])\n\n  window.socket = socket\n  return (\n    <div className=\"wrapper\">\n      {!state.joined ? <JoinBlock onLogin={onLogin}/>: <Chat {...state} onAddMessage={addMessage} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}